<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
       xmlns:http="http://www.mulesource.org/schema/mule/http/2.2"
       xmlns:restlet="http://www.mulesource.org/schema/mule/restlet/2.2"
       xmlns:json="http://www.mulesource.org/schema/mule/json/2.2"
       xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
       http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
       http://www.mulesource.org/schema/mule/restlet/2.2 http://www.mulesource.org/schema/mule/restlet/2.2/mule-restlet.xsd
       http://www.mulesource.org/schema/mule/json/2.2 http://www.mulesource.org/schema/mule/json/2.2/mule-json.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<configuration defaultSynchronousEndpoints="true" defaultResponseTimeout="30000"/>
	
	<context:property-placeholder location="discoveryenvironment.properties" />
	
	<spring:beans xmlns="http://www.springframework.org/schema/beans">
	
		<bean name="fileUploadedEvent"
			class="org.iplantc.jlrproxytoolkit.factorybean.JLRProxyFactoryBean">
			<property name="interfaces">
				<list><value>org.iplantc.iptol.server.FileUploadedEvent</value></list>
			</property>
			<property name="invocationHandler">
				<bean class="org.iplantc.jlrproxytoolkit.invocationhandler.SendViaMule">
					<property name="endpoint" value="vm://importfile" />
					<property name="synchronous" value="true" />
					<property name="exceptionClass" value="org.iplantc.iptol.server.UploadException" />
				</bean>
			</property>
		</bean>
	
		<bean name="extractNexusFileService"
			class="org.iplantc.phyloparser.NexusParser" />
	
		<bean name="extractNewickFileService"
			class="org.iplantc.phyloparser.NewickParser" />

		<bean name="labelTreeService"
			class="org.iplantc.importfile.phyloparser.LabelTrees" />
		
		<bean name="transformFileDataModel"
			class="org.iplantc.importfile.phyloparser.FileDataCdaoTransformer" />
		
		<bean name="transformTreeDataToTree"
			class="org.iplantc.exporttree.treedata.TreeTransformer" />
		
		<bean name="persistTreeModel"
			class="org.iplantc.importfile.treedata.PersistTreeData">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>
	
		<bean name="treeService"
			class="org.iplantc.treedata.service.TreeService">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>

		<bean name="fileService"
			class="org.iplantc.treedata.service.FileService">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>
		
		<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="org.postgresql.Driver" />
			<property name="url" value="jdbc:postgresql://${org.iplantc.discoveryenvironment.database.host}:${org.iplantc.discoveryenvironment.database.port}/${org.iplantc.discoveryenvironment.database.database}" />
			<property name="username" value="${org.iplantc.discoveryenvironment.database.user}" />
			<property name="password" value="${org.iplantc.discoveryenvironment.database.password}" />
		</bean>
	
		<bean name="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="mappingResources">
				<list>
					<value>database.hbm.xml</value>
				</list>
			</property>
			<property name="hibernateProperties">
				<value>
					hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
					hibernate.hbm2ddl.auto=update
				</value>
			</property>
		</bean>
		
		<bean name="argumentStorage" class="org.iplantc.muletoolkit.transformers.ArgumentStorage" />
	
	</spring:beans>

	<custom-transformer name="SaveArguments" class="org.iplantc.muletoolkit.transformers.SaveArguments">
		<spring:property name="argumentStorage" ref="argumentStorage" />
		<spring:property name="saveTemplate">
			<spring:list>
				<spring:value>PASS</spring:value>
				<spring:value>SAVE</spring:value>
			</spring:list>
		</spring:property>
	</custom-transformer>
	<custom-transformer name="RestoreArguments" class="org.iplantc.muletoolkit.transformers.RestoreArguments">
		<spring:property name="argumentStorage" ref="argumentStorage" />
		<spring:property name="restoreTemplate">
			<spring:list>
				<spring:value>O0</spring:value>
				<spring:value>S0</spring:value>
			</spring:list>
		</spring:property>
	</custom-transformer>
	<custom-transformer name="ExtractTreeInfo" class="org.iplantc.iptol.server.ExtractTreeInfoTransformer" />
	<custom-transformer name="ExtractFileInfo" class="org.iplantc.iptol.server.ExtractFileInfoTransformer" />	
	<custom-transformer name="StringToLong" class="org.iplantc.muletoolkit.transformers.StringToLongTransformer" />
	<custom-transformer name="ComposeChangeTreeLabelRequest" class="org.iplantc.iptol.server.ComposeChangeTreeLabelRequest" />
	<custom-transformer name="DiscardPayload" class="org.iplantc.muletoolkit.transformers.DiscardPayload" />
	<json:object-to-json-transformer name="SpitOutJsonTree" excludeProperties="nodes,allNodes,parent" />
	<json:object-to-json-transformer name="SpitOutJsonTreeList" />
	<json:object-to-json-transformer name="SpitOutJsonFile" excludeProperties="nanos,time,timezoneOffset,seconds" />
	<json:object-to-json-transformer name="SpitOutJsonFileList" excludeProperties="nanos,time,timezoneOffset,seconds" />
		
	<model>
		<service name="ImportFile">
			<inbound>
				<vm:inbound-endpoint path="importfile" synchronous="true" responseTransformer-refs="ExtractTreeInfo" />
				<forwarding-router />
			</inbound>
			<outbound>
				<chaining-router>
					<vm:outbound-endpoint path="extractfile" transformer-refs="SaveArguments" responseTransformer-refs="RestoreArguments" />
					<vm:outbound-endpoint path="labeltrees" />
					<vm:outbound-endpoint path="transformfiledatamodel" />
					<vm:outbound-endpoint path="persisttreemodel" />
				</chaining-router>
			</outbound>
		</service>
		
		<service name="ExtractFile">
			<inbound>
				<vm:inbound-endpoint path="extractfile" synchronous="true" />
				<forwarding-router />
			</inbound>
			<outbound>
				<exception-based-router>
					<vm:outbound-endpoint path="extractnexusfile" />
					<vm:outbound-endpoint path="extractnewickfile" />
				</exception-based-router>
			</outbound>
		</service>
		
		<service name="ExtractNexusFile">
			<inbound>
				<vm:inbound-endpoint path="extractnexusfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractNexusFileService" />
			</component>
		</service>

		<service name="ExtractNewickFile">
			<inbound>
				<vm:inbound-endpoint path="extractnewickfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractNewickFileService" />
			</component>
		</service>

		<service name="LabelTrees">
			<inbound>
				<vm:inbound-endpoint path="labeltrees" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="labelTreeService" />
			</component>
		</service>
		
		<service name="TransformFileDataModel">
			<inbound>
				<vm:inbound-endpoint path="transformfiledatamodel" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="transformFileDataModel" />
			</component>
		</service>

		<service name="PersistTreeModel">
			<inbound>
				<vm:inbound-endpoint path="persisttreemodel" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="persistTreeModel" />
			</component>
		</service>
		
		<service name="ChangeTreeLabel">
			<inbound>
				<vm:inbound-endpoint path="changetreelabel" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="updateTreeLabel" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

		<service name="RetrieveTreeData">
			<inbound>
				<vm:inbound-endpoint path="retrievetreedata" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveTree" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

		<service name="RetrieveTrees">
			<inbound>
				<vm:inbound-endpoint path="retrievetrees" synchronous="true" />
			</inbound>
			<component>
				<no-arguments-entry-point-resolver>
					<include-entry-point method="retrieveTrees" />
				</no-arguments-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

		<service name="TreeService">
			<inbound>
				<http:inbound-endpoint host="localhost" port="14444" synchronous="true" keep-alive="true" />
			</inbound>
			<outbound>
				<filtering-router>
					<vm:outbound-endpoint path="changetreelabel" transformer-refs="ComposeChangeTreeLabelRequest" responseTransformer-refs="DiscardPayload" />
					<restlet:uri-template-filter pattern="/trees/{set-property.treeId}/label" verbs="POST" />
				</filtering-router>
				<chaining-router>
					<vm:outbound-endpoint path="retrievetreedata" transformer-refs="StringToLong" />
					<vm:outbound-endpoint path="transformtreedatatotree" responseTransformer-refs="SpitOutJsonTree" />
					<restlet:uri-template-filter pattern="/trees/{set-payload.treeId}" />
				</chaining-router>
				<filtering-router>
					<vm:outbound-endpoint path="retrievetrees" responseTransformer-refs="ExtractTreeInfo SpitOutJsonTreeList" />
					<restlet:uri-template-filter pattern="/trees" />
				</filtering-router>
			</outbound>
		</service>

		<service name="TransformTreeDataToTree">
			<inbound>
				<vm:inbound-endpoint path="transformtreedatatotree" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="transformTreeDataToTree" />
			</component>
		</service>
		
		<service name="RetrieveFileData">
			<inbound>
				<vm:inbound-endpoint path="retrievefiledata" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveFile" />
				</method-entry-point-resolver>
				<spring-object bean="fileService" />
			</component>
		</service>

		<service name="RetrieveFiles">
			<inbound>
				<vm:inbound-endpoint path="retrievefiles" synchronous="true" />
			</inbound>
			<component>
				<no-arguments-entry-point-resolver>
					<include-entry-point method="retrieveFiles" />
				</no-arguments-entry-point-resolver>
				<spring-object bean="fileService" />
			</component>
		</service>

		<service name="FileService">
			<inbound>
				<http:inbound-endpoint host="localhost" port="14445" synchronous="true" keep-alive="true" />
			</inbound>
			<outbound>
				<chaining-router>
					<vm:outbound-endpoint path="retrievefiledata" 
						transformer-refs="StringToLong" 
						responseTransformer-refs="ExtractFileInfo SpitOutJsonFile" />
					<restlet:uri-template-filter pattern="/files/{set-payload.fileId}" />
				</chaining-router>
				<filtering-router>
					<vm:outbound-endpoint path="retrievefiles" 
						responseTransformer-refs="ExtractFileInfo SpitOutJsonFileList" />
					<restlet:uri-template-filter pattern="/files" />
				</filtering-router>
			</outbound>
		</service>
	</model>

</mule>
