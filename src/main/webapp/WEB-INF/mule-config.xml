<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesource.org/schema/mule/core/2.2"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:spring="http://www.springframework.org/schema/beans"
       xmlns:vm="http://www.mulesource.org/schema/mule/vm/2.2"
       xmlns:http="http://www.mulesource.org/schema/mule/http/2.2"
       xmlns:restlet="http://www.mulesource.org/schema/mule/restlet/2.2"
       xmlns:json="http://www.mulesource.org/schema/mule/json/2.2"
       xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.mulesource.org/schema/mule/core/2.2 http://www.mulesource.org/schema/mule/core/2.2/mule.xsd
       http://www.mulesource.org/schema/mule/vm/2.2 http://www.mulesource.org/schema/mule/vm/2.2/mule-vm.xsd
       http://www.mulesource.org/schema/mule/http/2.2 http://www.mulesource.org/schema/mule/http/2.2/mule-http.xsd
       http://www.mulesource.org/schema/mule/restlet/2.2 http://www.mulesource.org/schema/mule/restlet/2.2/mule-restlet.xsd
       http://www.mulesource.org/schema/mule/json/2.2 http://www.mulesource.org/schema/mule/json/2.2/mule-json.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

	<configuration defaultSynchronousEndpoints="true" defaultResponseTimeout="30000"/>

	<context:property-placeholder location="discoveryenvironment.properties" />

	<spring:beans xmlns="http://www.springframework.org/schema/beans">

        <bean name="jobDao" class="org.iplantc.jobs.dao.JobDaoImpl" />

        <bean name="jobManager" class="org.iplantc.jobs.service.impl.JobManagerImpl" >
            <property name="sessionFactory" ref="sessionFactory" />
            <property name="jobDao" ref="jobDao" />
            <property name="jobRunnerFactory">
                <bean class="org.iplantc.jobs.service.impl.JobRunnerFactoryImpl" />
            </property>
        </bean>

	    <bean name="jobService" class="org.iplantc.jobs.service.JobService" >
	        <property name="sessionFactory" ref="sessionFactory" />
	        <property name="jobDao" ref="jobDao" />
	        <property name="jobManager" ref="jobManager" />
	    </bean>

<!--
	    <bean name="testJobService" class="org.iplantc.jobs.test.LogTestService">
	       <property name="jobService" ref="jobService" />
	    </bean>
-->
        <bean name="provenanceDao" class="org.iplantc.provenance.service.ProvenanceDaoImpl" />

        <bean name="provenanceService" class="org.iplantc.provenance.service.ProvenanceService">
            <property name="sessionFactory" ref="sessionFactory" />
            <property name="provenanceDao" ref="provenanceDao" />

            <property name="eventMappers">
                <list>
                    <bean class="org.iplantc.provenance.mapper.FileUploadEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.FileDownloadEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.FileViewEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.FileMoveEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.TreeViewEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.MatrixViewEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.TreeLabelModificationEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.FileModificationEventMapper" />
                    <bean class="org.iplantc.provenance.mapper.FileCopyEventMapper" />
                </list>
            </property>

            <property name="eventFormatters">
                <list>
                    <bean class="org.iplantc.provenance.formatter.FileUploadEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.FileDownloadEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.FileViewEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.FileMoveEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.TreeViewEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.MatrixViewEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.TreeLabelModificationEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.FileModificationEventFormatter" />
                    <bean class="org.iplantc.provenance.formatter.FileCopyEventFormatter" />
                </list>
            </property>
        </bean>

		<bean name="fileUploadedEvent"
			class="org.iplantc.jlrproxytoolkit.factorybean.JLRProxyFactoryBean">
			<property name="interfaces">
				<list><value>org.iplantc.iptol.server.FileUploadedEvent</value></list>
			</property>
			<property name="invocationHandler">
				<bean class="org.iplantc.jlrproxytoolkit.invocationhandler.SendViaMule">
					<property name="endpoint" value="vm://importfile" />
					<property name="synchronous" value="true" />
					<property name="exceptionClass" value="org.iplantc.iptol.server.UploadException" />
				</bean>
			</property>
		</bean>

		<bean name="extractNexusFileService"
			class="org.iplantc.phyloparser.parser.NexusParser" />

		<bean name="extractNewickFileService"
			class="org.iplantc.phyloparser.parser.NewickParser" />

		<bean name="extractContrastResultService"
			class="org.iplantc.importfile.text.StrictTextParser">
			<property name="matchFilter">
				<bean class="org.iplantc.importfile.text.ContainsMatchFilter">
					<constructor-arg index="0" value="Continuous character contrasts analysis" />
				</bean>
			</property>
		</bean>

		<bean name="extractCsvTraitFileService"
			class="org.iplantc.phyloparser.parser.CsvTraitParser" />

		<bean name="labelTreeService"
			class="org.iplantc.importfile.phyloparser.LabelTrees" />

		<bean name="transformFileDataModel"
			class="org.iplantc.importfile.phyloparser.FileDataCdaoTransformer" />

		<bean name="transformTreeDataToTree"
			class="org.iplantc.exporttree.treedata.TreeTransformer" />

        <bean name="transformMatrixDataToMatrix"
            class="org.iplantc.iptol.server.MatrixTransformer" />

		<bean name="persistTreeModel"
			class="org.iplantc.importfile.treedata.PersistTreeData">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>

		<bean name="transformDatabaseModel"
			class="org.iplantc.exportfile.treedata.CdaoFileDataTransformer" />

		<bean name="transformDatabaseTextModel"
			class="org.iplantc.exportfile.treedata.TextFileStringTransformer" />

		<bean name="transformDatabaseTree"
			class="org.iplantc.exporttree.treedata.TreeTransformer" />

		<bean name="transformDatabaseTrees"
			class="org.iplantc.exporttree.treedata.MultiTreeTransformer" />

		<bean name="transformDatabaseMatrix"
			class="org.iplantc.exportmatrix.treedata.MatrixTransformer" />

		<bean name="fileDataBuilder"
			class="org.iplantc.phyloparser.builder.FileDataBuilder" />

		<bean name="exportPhyloparserModelToNexus"
			class="org.iplantc.phyloparser.generator.NexusGenerator" />

		<bean name="exportPhyloparserModelToNewick"
			class="org.iplantc.phyloparser.generator.NewickGenerator" />

        <bean name="exportPhyloparserModelToPhylipTrait"
			class="org.iplantc.phyloparser.generator.PhylipTraitGenerator" />

		<bean name="countTrees"
			class="org.iplantc.runcontrast.CountTrees" />

		<bean name="contrastJobConfigService"
			class="org.iplantc.runcontrast.ContrastJobConfigurationService">
            <property name="sessionFactory" ref="sessionFactory" />
		</bean>

        <bean name="reconcileContrastData"
        	class="org.iplantc.runcontrast.ReconcileData" />

        <bean name="runContrast"
        	class="org.iplantc.runcontrast.RunContrast">
        	<property name="baseUrl" value="${org.iplantc.discoveryenvironment.contrast.baseUrl}" />
        	<property name="jobService" ref="jobService" />
        </bean>

        <bean name="generateUploadEvents" class="org.iplantc.importfile.treedata.GenerateUploadEvents">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <bean name="generateSaveAsEvents" class="org.iplantc.importfile.treedata.GenerateSaveAsEvents">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <bean name="generateDownloadEvent" class="org.iplantc.exportfile.treedata.GenerateDownloadEvent">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <bean name="generateViewEvent" class="org.iplantc.exportfile.treedata.GenerateViewEvent">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

		<bean name="treeService"
			class="org.iplantc.treedata.service.TreeService">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>

		<bean name="matrixService" class="org.iplantc.treedata.service.MatrixService">
		    <property name="sessionFactory" ref="sessionFactory" />
		</bean>

		<bean name="fileService"
			class="org.iplantc.treedata.service.FileService">
			<property name="sessionFactory" ref="sessionFactory" />
		</bean>

		<bean name="workspaceService"
			class="org.iplantc.treedata.service.WorkspaceService">
			<property name="sessionFactory" ref="sessionFactory" />
			<property name="fileService" ref="fileService" />
		</bean>

		<bean name="folderService" class="org.iplantc.treedata.service.FolderService">
		    <property name="sessionFactory" ref="sessionFactory" />
		    <property name="fileService" ref="fileService" />
		</bean>

        <bean name="userSessionService" class="org.iplantc.treedata.service.UserSessionService">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

        <bean name="userService" class="org.iplantc.treedata.service.UserService">
            <property name="sessionFactory" ref="sessionFactory" />
        </bean>

		<bean name="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
			<property name="driverClassName" value="org.postgresql.Driver" />
			<property name="url" value="jdbc:postgresql://${org.iplantc.discoveryenvironment.database.host}:${org.iplantc.discoveryenvironment.database.port}/${org.iplantc.discoveryenvironment.database.database}" />
			<property name="username" value="${org.iplantc.discoveryenvironment.database.user}" />
			<property name="password" value="${org.iplantc.discoveryenvironment.database.password}" />
		</bean>

		<bean name="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
			<property name="dataSource" ref="dataSource" />
			<property name="mappingResources">
				<list>
					<value>database.hbm.xml</value>
				</list>
			</property>
			<property name="hibernateProperties">
				<value>
					hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
					hibernate.hbm2ddl.auto=validate
					hibernate.jdbc.batch_size=50
				</value>
			</property>
		</bean>

		<bean name="contrastRequestJsonConfig" class="net.sf.json.JsonConfig">
			<!-- transform JSON arrays into Lists -->
			<property name="arrayMode" value="1" />
		</bean>
	</spring:beans>

	<custom-transformer name="FormatError" class="org.iplantc.muletoolkit.transformers.FormatError" />
	<custom-transformer name="AbortOnError" class="org.iplantc.muletoolkit.transformers.AbortOnError" />
	<custom-transformer name="ExtractTreeInfo" class="org.iplantc.iptol.server.ExtractTreeInfoTransformer" />
	<custom-transformer name="ExtractMatrixInfo" class="org.iplantc.iptol.server.ExtractMatrixInfoTransformer" />
	<custom-transformer name="ExtractFileInfo" class="org.iplantc.iptol.server.ExtractFileInfoTransformer" />
	<custom-transformer name="FileToFileInfo" class="org.iplantc.iptol.server.FileToFileInfoTransformer" />
	<custom-transformer name="ExtractWorkspaceInfo" class="org.iplantc.iptol.server.ExtractWorkspaceInfoTransformer" />
	<custom-transformer name="ExtractJobInfo" class="org.iplantc.iptol.server.ExtractJobInfoTransformer" />
	<custom-transformer name="StringToLong" class="org.iplantc.muletoolkit.transformers.StringToLongTransformer" />
	<custom-transformer name="FirstStringToLong" class="org.iplantc.muletoolkit.transformers.FirstStringToLongTransformer" />
	<custom-transformer name="StringListToLongList" class="org.iplantc.muletoolkit.transformers.StringListToLongListTransformer" />
	<custom-transformer name="ComposeChangeLabelRequest" class="org.iplantc.iptol.server.ComposeChangeLabelRequest" />
	<custom-transformer name="BuildStoreContrastJobRequest" class="org.iplantc.iptol.server.ComposeChangeLabelRequest" />
	<custom-transformer name="DiscardPayload" class="org.iplantc.muletoolkit.transformers.DiscardPayload" />
	<custom-transformer name="SetHttpStatusOnException" class="org.iplantc.muletoolkit.transformers.SetHttpStatusOnException" />
	<custom-transformer name="ForceNexFileExtension" class="org.iplantc.iptol.server.ForceFileExtension">
		<spring:property name="extension" value="nex" />
	</custom-transformer>
	<custom-transformer name="ForceTxtFileExtension" class="org.iplantc.iptol.server.ForceFileExtension">
		<spring:property name="extension" value="txt" />
	</custom-transformer>
	<json:object-to-json-transformer name="SpitOutJsonTree" excludeProperties="nodes,allNodes,parent" />
	<json:object-to-json-transformer name="SpitOutJsonTreeList" />
	<json:object-to-json-transformer name="SpitOutJsonFile" />
	<json:object-to-json-transformer name="SpitOutJsonFileInfo" />
	<json:object-to-json-transformer name="SpitOutJsonFileList" />
	<json:object-to-json-transformer name="SpitOutJsonWorkspace" />
	<json:object-to-json-transformer name="SpitOutJson" />
	<json:object-to-json-transformer name="SpitOutJsonThings" includeProperties="id,name,species" />
	<json:object-to-json-transformer name="SpitOutJsonFileProvenance" excludeProperties="id, groups" />
	<json:json-to-object-transformer name="JsonToFolder" returnClass="org.iplantc.treedata.model.Folder" />
    <json:json-to-object-transformer name="JsonToImportFileInfo" returnClass="org.iplantc.iptol.server.ImportFileInfo" />
    <json:json-to-object-transformer name="JsonToLoginCmd" returnClass="org.iplantc.treedata.command.LoginCmd" />
    <json:json-to-object-transformer name="JsonToJSONObject" returnClass="net.sf.json.JSONObject" jsonConfig-ref="contrastRequestJsonConfig" />
    <json:json-to-object-transformer name="JsonToMultiResourceDeleteCmd" returnClass="org.iplantc.treedata.command.MultiResourceDeleteCmd" />
    <json:json-to-object-transformer name="JsonToContrastJobConfiguration" returnClass="org.iplantc.runcontrast.ContrastJobConfiguration" />
    <custom-transformer name="JsonToMatrixData" class="org.iplantc.iptol.server.JsonToMatrixData" />
	<custom-transformer name="BuildCreateFolderArgs" class="org.iplantc.iptol.server.BuildCreateFolderArgs" />
	<custom-transformer name="BuildRenameFolderArgs" class="org.iplantc.iptol.server.BuildRenameFolderArgs" />
	<custom-transformer name="BuildDeleteFolderArgs" class="org.iplantc.iptol.server.BuildDeleteFolderArgs" />
	<custom-transformer name="BuildMoveFileArgs" class="org.iplantc.iptol.server.BuildMoveFileArgs" />
    <custom-transformer name="BuildImportFileArgs" class="org.iplantc.iptol.server.BuildImportFileArgs" />
    <custom-transformer name="BuildSetMatrixArgs" class="org.iplantc.iptol.server.BuildSetMatrixArgs" />
    <custom-transformer name="SpitOutJsonModelId" class="org.iplantc.iptol.server.SpitOutJsonModelId" />
    <custom-transformer name="ParseUploadPayload" class="org.iplantc.iptol.server.ParseUploadPayload" />
    <custom-transformer name="ParseUpdatePayload" class="org.iplantc.iptol.server.ParseUpdatePayload" />
    <custom-transformer name="SetWorkspaceId" class="org.iplantc.iptol.server.SetWorkspaceId" />
    <custom-transformer name="BuildPayloadForSaveOrSaveAs" class="org.iplantc.iptol.server.BuildPayloadForSaveOrSaveAs" />
    <custom-transformer name="WrapSpecies" class="org.iplantc.iptol.server.WrapSpecies" />
    <custom-transformer name="SetFileAttachment" class="org.iplantc.iptol.server.SetFileAttachment" />
	<custom-transformer name="TransformReconciliationMatrix" class="org.iplantc.iptol.server.TransformReconciliationMatrix" />
	<byte-array-to-object-transformer name="ByteArrayToString" returnClass="java.lang.String" />
    <object-to-byte-array-transformer name="ObjectToByteArray" />
    <object-to-string-transformer name="ObjectToString" />
	<custom-transformer name="ExtractTreeIds" class="org.mule.transformer.simple.GetBeanProperty">
		<spring:property name="propertyName" value="treeIds" />
	</custom-transformer>
	<custom-transformer name="ExtractIds" class="org.mule.transformer.simple.GetBeanProperty">
		<spring:property name="propertyName" value="ids" />
	</custom-transformer>
	<custom-transformer name="ExtractMatrixId" class="org.mule.transformer.simple.GetBeanProperty">
		<spring:property name="propertyName" value="traitId" />
	</custom-transformer>
	<message-properties-transformer name="AddNexusFileContentResponseHeaders">
		<add-message-property key="Content-Type" value="application/x-nexus"/>
		<!--  done in code
		<add-message-property key="Content-Disposition" value="#[string:attachment;filename=#[bean:name]]" />
		-->
	</message-properties-transformer>
	<message-properties-transformer name="AddTextFileContentResponseHeaders">
		<add-message-property key="Content-Type" value="text/plain"/>
		<!--  done in code
		<add-message-property key="Content-Disposition" value="#[string:attachment;filename=#[bean:name]]" />
		-->
	</message-properties-transformer>

	<model>

	    <service name="PublishEvent">
            <inbound>
                <vm:inbound-endpoint path="publishEvent"/>
            </inbound>
            <outbound>
                <pass-through-router>
                    <vm:outbound-endpoint path="sendEventToProvenance" />
                </pass-through-router>
            </outbound>
        </service>

        <service name="AddFile">
            <inbound>
                <vm:inbound-endpoint path="addfile" synchronous="true" />
                <forwarding-router />
            </inbound>
            <outbound>
                <filtering-router>
                    <vm:outbound-endpoint path="uploadfile" />
                    <message-property-filter pattern="DE_ADD_FILE_METHOD=upload" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="presaveorsaveasfile" />
                    <message-property-filter pattern="DE_ADD_FILE_METHOD=saveAs" />
                </filtering-router>
            </outbound>
        </service>

		<service name="UploadFile">
			<inbound>
				<vm:inbound-endpoint path="uploadfile" synchronous="true" responseTransformer-refs="FormatError AbortOnError ExtractFileInfo" />
				<forwarding-router />
			</inbound>
			<outbound>
				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
				    <vm:outbound-endpoint path="validatefilename">
				       <property key="args" value="arg1" />
				    </vm:outbound-endpoint>
					<vm:outbound-endpoint path="extractfile">
					   <property key="args" value="arg0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="labeltrees">
					   <property key="args" value="e1,arg1" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="transformfiledatamodel">
					   <property key="args" value="e1" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="persisttreemodel">
					   <property key="args" value="e3" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="addfiletoworkspace">
					   <property key="args" value="arg2,e3,arg3" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="generateuploadevents">
					   <property key="args" value="e1,e3" />
					   <property key="returnArg" value="e3" />
					</vm:outbound-endpoint>
				</custom-outbound-router>
			</outbound>
		</service>

        <service name="PreSaveOrSaveAsFile">
            <inbound>
                <vm:inbound-endpoint path="presaveorsaveasfile" synchronous="true" />
                <forwarding-router />
            </inbound>
            <outbound>
                <custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
                    <vm:outbound-endpoint path="getfileid">
                       <property key="args" value="arg1,arg3,arg4" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="saveorsaveasfile">
                       <property key="args" value="e0,arg0,arg1,arg2,arg3,arg4" />
                    </vm:outbound-endpoint>
                </custom-outbound-router>
            </outbound>
        </service>

        <service name="SaveOrSaveAsFile">
            <inbound>
                <vm:inbound-endpoint path="saveorsaveasfile" transformer-refs="BuildPayloadForSaveOrSaveAs" synchronous="true" responseTransformer-refs="FormatError AbortOnError ExtractFileInfo"/>
                <forwarding-router />
            </inbound>
            <outbound>
                <custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
                    <vm:outbound-endpoint path="updatefile">
                        <property key="args" value="arg0,arg1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="retrievefiledata">
                        <property key="args" value="arg0" />
                    </vm:outbound-endpoint>
                    <message-property-filter pattern="DE_SAVE_FILE_METHOD=save" />
                </custom-outbound-router>
                <filtering-router>
                    <vm:outbound-endpoint path="saveasfile" />
                    <message-property-filter pattern="DE_SAVE_FILE_METHOD=saveAs" />
                </filtering-router>
            </outbound>
        </service>

		<service name="SaveAsFile">
            <inbound>
                <vm:inbound-endpoint path="saveasfile" synchronous="true"  />
                <forwarding-router />
            </inbound>
            <outbound>
                <custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
                    <vm:outbound-endpoint path="validatefilename">
                       <property key="args" value="arg1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="extractfile">
                       <property key="args" value="arg0,Boolean:false" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="labeltrees">
                       <property key="args" value="e1,arg1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="transformfiledatamodel">
                       <property key="args" value="e1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="persisttreemodel">
                       <property key="args" value="e3" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="addfiletoworkspace">
                       <property key="args" value="arg3,e3,arg4" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="generatesaveasevents">
                       <property key="args" value="arg2,e3" />
                       <property key="returnArg" value="e3" />
                    </vm:outbound-endpoint>
                </custom-outbound-router>
            </outbound>
        </service>

		<service name="UpdateFile">
            <inbound>
                <vm:inbound-endpoint path="updatefile" synchronous="true" />
                <forwarding-router />
            </inbound>
            <outbound>
                <custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
                    <vm:outbound-endpoint path="getfilename">
                        <property key="args" value="arg0" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="extractfile">
                       <property key="args" value="arg1,Boolean:false" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="labeltrees">
                       <property key="args" value="e1,e0" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="transformfiledatamodel">
                       <property key="args" value="e1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="savefile">
                       <property key="args" value="arg0,e3" />
                    </vm:outbound-endpoint>
                </custom-outbound-router>
            </outbound>
        </service>

        <service name="ValidateFilename">
            <inbound>
                <vm:inbound-endpoint path="validatefilename" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="validateFilename" />
                </method-entry-point-resolver>
                 <spring-object bean="fileService" />
            </component>
        </service>

		<service name="ExtractFile">
			<inbound>
				<vm:inbound-endpoint path="extractfile" synchronous="true" />
				<forwarding-router />
			</inbound>
			<outbound>
				<exception-based-router>
					<vm:outbound-endpoint path="extractnexusfile" />
					<vm:outbound-endpoint path="extractnewickfile" />
					<vm:outbound-endpoint path="extractcontrastresultfile" />
					<vm:outbound-endpoint path="extractcsvtraitfile" />
				</exception-based-router>
			</outbound>
		</service>

		<service name="ExtractNexusFile">
			<inbound>
				<vm:inbound-endpoint path="extractnexusfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractNexusFileService" />
			</component>
		</service>

		<service name="ExtractNewickFile">
			<inbound>
				<vm:inbound-endpoint path="extractnewickfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractNewickFileService" />
			</component>
		</service>

		<service name="ExtractContrastResultFile">
			<inbound>
				<vm:inbound-endpoint path="extractcontrastresultfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractContrastResultService" />
			</component>
		</service>

		<service name="ExtractCsvTraitFile">
			<inbound>
				<vm:inbound-endpoint path="extractcsvtraitfile" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="extractCsvTraitFileService" />
			</component>
		</service>

		<service name="LabelTrees">
			<inbound>
				<vm:inbound-endpoint path="labeltrees" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="labelTreeService" />
			</component>
		</service>

		<service name="TransformFileDataModel">
			<inbound>
				<vm:inbound-endpoint path="transformfiledatamodel" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="transformFileDataModel" />
			</component>
		</service>

		<service name="PersistTreeModel">
			<inbound>
				<vm:inbound-endpoint path="persisttreemodel" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="persistTreeModel" />
			</component>
		</service>

        <service name="SaveFile">
            <inbound>
                <vm:inbound-endpoint path="savefile" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="persistTreeModel" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

		<service name="AddFileToWorkspace">
			<inbound>
				<vm:inbound-endpoint path="addfiletoworkspace" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver acceptVoidMethods="true">
					<include-entry-point method="addFileToWorkspace" />
					<include-entry-point method="addFileToWorkspaceFolder" />
				</method-entry-point-resolver>
				<spring-object bean="workspaceService" />
			</component>
		</service>

        <service name="GenerateUploadEvents">
            <inbound>
                <vm:inbound-endpoint path="generateuploadevents" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="generateUploadEvents" />
                </method-entry-point-resolver>
                <spring-object bean="generateUploadEvents" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

        <service name="GenerateSaveAsEvent">
            <inbound>
                <vm:inbound-endpoint path="generatesaveasevents" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="generateSaveAsEvents" />
                </method-entry-point-resolver>
                <spring-object bean="generateSaveAsEvents" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

        <service name="GenerateDownloadEvent">
            <inbound>
                <vm:inbound-endpoint path="generatedownloadevent" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="generateDownloadEvent" />
                </method-entry-point-resolver>
                <spring-object bean="generateDownloadEvent" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

        <service name="GenerateViewEvent">
            <inbound>
                <vm:inbound-endpoint path="generateviewevent" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="generateViewEvent" />
                </method-entry-point-resolver>
                <spring-object bean="generateViewEvent" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

		<service name="ChangeTreeLabel">
			<inbound>
				<vm:inbound-endpoint path="changetreelabel" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="updateTreeLabel" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
				<binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
			</component>
		</service>

		<service name="ChangeFilename">
			<inbound>
				<vm:inbound-endpoint path="changefilename" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="updateFilename" />
				</method-entry-point-resolver>
				<spring-object bean="fileService" />
				<binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
			</component>
		</service>

        <service name="GetFilename">
            <inbound>
                <vm:inbound-endpoint path="getfilename" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getFilename" />
                </method-entry-point-resolver>
                <spring-object bean="fileService" />
            </component>
        </service>

        <service name="GetFileId">
            <inbound>
                <vm:inbound-endpoint path="getfileid" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getFileId" />
                    <include-entry-point method="getFileIdInFolder" />
                </method-entry-point-resolver>
                <spring-object bean="fileService" />
            </component>
        </service>

		<service name="RetrieveTreeData">
			<inbound>
				<vm:inbound-endpoint path="retrievetreedata" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveTree" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
				<binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
			</component>
		</service>

		<service name="RetrieveTrees">
			<inbound>
				<vm:inbound-endpoint path="retrievetrees" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveTrees" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

        <service name="RetrieveFileTrees">
            <inbound>
                <vm:inbound-endpoint path="retrievefiletrees" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveFileTrees" />
                </method-entry-point-resolver>
                <spring-object bean="treeService" />
            </component>
        </service>

 		<service name="RetrieveTreeList">
			<inbound>
				<vm:inbound-endpoint path="retrievetreelist" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveTreeList" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

 		<service name="RetrieveSpeciesForTreeList">
			<inbound>
				<vm:inbound-endpoint path="retrievespeciestreelist" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveSpeciesForTreeList" />
				</method-entry-point-resolver>
				<spring-object bean="treeService" />
			</component>
		</service>

        <service name="RetrieveMatrixData">
            <inbound>
                <vm:inbound-endpoint path="retrievematrixdata" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveMatrix" />
                </method-entry-point-resolver>
                <spring-object bean="matrixService" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

        <service name="SetMatrixData">
            <inbound>
                <vm:inbound-endpoint path="setmatrixdata" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="setMatrix" />
                </method-entry-point-resolver>
                <spring-object bean="matrixService" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

        <service name="RetrieveMatices">
            <inbound>
                <vm:inbound-endpoint path="retrievematrices" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveMatrices" />
                </method-entry-point-resolver>
                <spring-object bean="matrixService" />
            </component>
        </service>

        <service name="RetrieveFileMatices">
            <inbound>
                <vm:inbound-endpoint path="retrievefilematrices" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveFileMatrices" />
                </method-entry-point-resolver>
                <spring-object bean="matrixService" />
            </component>
        </service>

 		<service name="RetrieveSpeciesForMatrix">
			<inbound>
				<vm:inbound-endpoint path="retrievespeciesmatrix" synchronous="true" />
			</inbound>
			<component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveTaxaForMatrix" />
                </method-entry-point-resolver>
                <spring-object bean="matrixService" />
			</component>
		</service>

		<service name="RetrieveWorkspaceData">
			<inbound>
				<vm:inbound-endpoint path="retrieveworkspacedata" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveWorkspace" />
				</method-entry-point-resolver>
				<spring-object bean="workspaceService" />
			</component>
		</service>

		<service name="RestfulServices">
			<inbound>
				<http:inbound-endpoint host="localhost" port="14444" transformer-refs="ObjectToByteArray ByteArrayToString" synchronous="true" keep-alive="true" />
			</inbound>
			<outbound>
			    <filtering-router>
                    <vm:outbound-endpoint path="login" transformer-refs="JsonToLoginCmd" responseTransformer-refs="FormatError AbortOnError" />
                    <restlet:uri-template-filter pattern="/login" verbs="POST" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="getuserinfo" responseTransformer-refs="FormatError AbortOnError SpitOutJson" />
                    <restlet:uri-template-filter pattern="/users/{set-payload.userId}" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="addfile" transformer-refs="ParseUploadPayload" responseTransformer-refs="FormatError AbortOnError SpitOutJsonFileInfo" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/folders/{set-property.folderId}/files" verbs="POST" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="addfile" transformer-refs="ParseUploadPayload" responseTransformer-refs="FormatError AbortOnError SpitOutJsonFileInfo" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/files" verbs="POST" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="updatefile" transformer-refs="ParseUpdatePayload" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/files/{set-property.fileId}" verbs="PUT" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="deleteresources" transformer-refs="JsonToMultiResourceDeleteCmd SetWorkspaceId" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/resources?method=multiDelete" verbs="POST" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="deletefile" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}" verbs="DELETE" />
                </filtering-router>
				<filtering-router>
                    <vm:outbound-endpoint path="retrievespeciestreelist" transformer-refs="JsonToJSONObject ExtractIds StringListToLongList" responseTransformer-refs="FormatError AbortOnError WrapSpecies SpitOutJsonThings" />
                    <restlet:uri-template-filter pattern="/trees/taxa" verbs="POST" />
                </filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="changetreelabel" transformer-refs="ComposeChangeLabelRequest" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
					<restlet:uri-template-filter pattern="/trees/{set-property.id}/label" verbs="POST" />
				</filtering-router>
				<chaining-router>
					<vm:outbound-endpoint path="retrievetreedata" transformer-refs="StringToLong"  responseTransformer-refs="FormatError" />
					<vm:outbound-endpoint path="transformtreedatatotree" responseTransformer-refs="FormatError AbortOnError SpitOutJsonTree" />
					<restlet:uri-template-filter pattern="/trees/{set-payload.treeId}" />
				</chaining-router>
				<filtering-router>
					<vm:outbound-endpoint path="retrievetrees" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError ExtractTreeInfo SpitOutJsonTreeList" />
					<restlet:uri-template-filter pattern="/workspaces/{set-payload.workspaceId}/trees" verbs="GET" />
				</filtering-router>
				<filtering-router>
                    <vm:outbound-endpoint path="retrievefiletrees" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError ExtractTreeInfo SpitOutJsonTreeList" />
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/trees" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="setmatrixdata" transformer-refs="JsonToMatrixData BuildSetMatrixArgs" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/matrices/{set-property.matrixId}" verbs="PUT" />
                </filtering-router>
				<filtering-router>
                    <vm:outbound-endpoint path="retrievespeciesmatrix" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError WrapSpecies SpitOutJsonThings" />
                    <restlet:uri-template-filter pattern="/matrices/{set-payload.matrixId}/taxa" verbs="GET" />
                </filtering-router>
				<chaining-router>
                    <vm:outbound-endpoint path="retrievematrixdata" transformer-refs="StringToLong" responseTransformer-refs="FormatError" />
                    <vm:outbound-endpoint path="transformmatrixdatatomatrix" responseTransformer-refs="FormatError AbortOnError SpitOutJsonTree" />
                    <restlet:uri-template-filter pattern="/matrices/{set-payload.matrixId}" />
                </chaining-router>
				<filtering-router>
                    <vm:outbound-endpoint path="retrievematrices" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError ExtractMatrixInfo SpitOutJsonTreeList" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-payload.workspaceId}/matrices" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="retrievefilematrices" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError ExtractMatrixInfo SpitOutJsonTreeList" />
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/matrices" verbs="GET" />
                </filtering-router>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
					<vm:outbound-endpoint path="retrievefilecontents"
						transformer-refs="StringToLong"
						responseTransformer-refs="FormatError AbortOnError SetFileAttachment">
					   <property key="args" value="arg0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="retrievefileprovenancetextcomments"
						transformer-refs="StringToLong"
						responseTransformer-refs="FormatError">
					   <property key="args" value="arg0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="transformandexportfilewithprovenance"
						responseTransformer-refs="FormatError">
						<property key="args" value="e0,e1" />
					</vm:outbound-endpoint>

					<vm:outbound-endpoint path="generatedownloadevent">
                       <property key="args" value="e0" />
                       <property key="returnArg" value="e2" />
                    </vm:outbound-endpoint>
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/content" verbs="GET" />
				</custom-outbound-router>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
					<vm:outbound-endpoint path="retrievefilecontents"
						transformer-refs="StringToLong"
						responseTransformer-refs="FormatError AbortOnError SetFileAttachment">
					   <property key="args" value="arg0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="transformandexportfile"
						responseTransformer-refs="FormatError">
						<property key="args" value="e0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="generateviewevent">
                       <property key="args" value="e0" />
                       <property key="returnArg" value="e1" />
                    </vm:outbound-endpoint>
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/rawcontent" verbs="GET" />
				</custom-outbound-router>
                <filtering-router>
                    <vm:outbound-endpoint path="retrievefileprovenancetextall"
                        transformer-refs="StringToLong"
                        responseTransformer-refs="FormatError AbortOnError SpitOutJsonFileProvenance" />
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/provenance.text.all" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="retrievefileprovenancetextcomments"
                        transformer-refs="StringToLong"
                        responseTransformer-refs="FormatError AbortOnError SpitOutJsonFileProvenance" />
                    <restlet:uri-template-filter pattern="/files/{set-payload.fileId}/provenance.text.comments" verbs="GET" />
                </filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="changefilename" transformer-refs="ComposeChangeLabelRequest" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
					<restlet:uri-template-filter pattern="/files/{set-property.id}/name" verbs="POST" />
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="retrievefiledata"
						transformer-refs="StringToLong"
						responseTransformer-refs="FormatError AbortOnError FileToFileInfo SpitOutJsonFile" />
					<restlet:uri-template-filter pattern="/files/{set-payload.fileId}" />
				</filtering-router>
				<filtering-router>
					<vm:outbound-endpoint path="retrievefiles"
					    transformer-refs="StringToLong"
						responseTransformer-refs="FormatError AbortOnError ExtractFileInfo SpitOutJsonFileList" />
					<restlet:uri-template-filter pattern="/workspaces/{set-payload.workspaceId}/files" verbs="GET" />
				</filtering-router>
	 			<filtering-router>
					<vm:outbound-endpoint path="retrieveworkspacedata"
						transformer-refs="StringToLong"
						responseTransformer-refs="FormatError AbortOnError ExtractWorkspaceInfo SpitOutJsonWorkspace" />
					<restlet:uri-template-filter pattern="/workspace/{set-payload.workspaceId}" />
				</filtering-router>
				 <filtering-router>
                    <vm:outbound-endpoint path="renameFolder"
                         transformer-refs="JsonToFolder BuildRenameFolderArgs"
                         responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/folders/{set-property.folderId}/label" verbs="PUT" />
                </filtering-router>
				<filtering-router>
				    <vm:outbound-endpoint path="createFolder"
				         transformer-refs="JsonToFolder BuildCreateFolderArgs"
				         responseTransformer-refs="FormatError AbortOnError SpitOutJsonModelId" />
				    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/folders/{set-property.parentFolderId}/folders" verbs="POST" />
				</filtering-router>
				<filtering-router>
                    <vm:outbound-endpoint path="deleteFolder"
                         transformer-refs="BuildDeleteFolderArgs"
                         responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/folders/{set-property.folderId}" verbs="DELETE" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="moveFile"
                         transformer-refs="JsonToFolder BuildMoveFileArgs"
                         responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.workspaceId}/files/{set-property.fileId}/parentFolder" verbs="PUT" />
                </filtering-router>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
 					<vm:outbound-endpoint path="updateContrastJobStatus"
 						transformer-refs="FirstStringToLong">
 						<property key="args" value="arg0,String:RUNNING" />
 					</vm:outbound-endpoint>
 					<vm:outbound-endpoint path="retrievecontrastjobconfig"
 						transformer-refs="StringToLong"
 						responseTransformer-refs="TransformReconciliationMatrix">
 						<property key="args" value="arg0" />
 					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="retrievetreelist"
						transformer-refs="ExtractTreeIds StringListToLongList"
						responseTransformer-refs="FormatError">
					   <property key="args" value="e1" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="retrievematrixdata"
						transformer-refs="ExtractMatrixId StringToLong"
						responseTransformer-refs="FormatError">
					   <property key="args" value="e1" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="reconcileContrastData"
						responseTransformer-refs="FormatError">
						<property key="args" value="e2,e3,Bean:e1.reconciliation" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="transformdbtrees"
						responseTransformer-refs="FormatError">
						<property key="args" value="e2" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="transformdbmatrix"
						responseTransformer-refs="FormatError">
						<property key="args" value="e3" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="buildtreefiledata"
						responseTransformer-refs="FormatError">
						<property key="args" value="e5" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="buildmatrixfiledata"
						responseTransformer-refs="FormatError">
						<property key="args" value="e6" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="exportphyloparsermodeltonewick"
						responseTransformer-refs="FormatError">
						<property key="args" value="e7" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="exportphyloparsermodeltophyliptrait"
						responseTransformer-refs="FormatError">
						<property key="args" value="e8" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="counttrees"
						responseTransformer-refs="FormatError">
						<property key="args" value="e2,e1" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="runcontrast"
						responseTransformer-refs="FormatError AbortOnError DiscardPayload">
						<property key="args" value="e9,e10,e11" />
					</vm:outbound-endpoint>

                    <restlet:uri-template-filter pattern="/contrast/{set-payload.id}/run" verbs="POST" />
				</custom-outbound-router>
				<filtering-router>
 					<vm:outbound-endpoint path="retrievecontrastjob"
 						transformer-refs="StringToLong"
 						responseTransformer-refs="SpitOutJson" />
                    <restlet:uri-template-filter pattern="/contrast/{set-payload.id}" verbs="GET" />
				</filtering-router>
				<filtering-router>
 					<vm:outbound-endpoint path="deleteContrastJob"
 						transformer-refs="StringToLong"
 						responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/contrast/{set-payload.id}" verbs="DELETE" />
				</filtering-router>
				<filtering-router>
 					<vm:outbound-endpoint path="retrievecontrastjobs"
 						transformer-refs="StringToLong"
 						responseTransformer-refs="SpitOutJson" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-payload.id}/contrast" verbs="GET" />
				</filtering-router>
                <filtering-router>
                	<vm:outbound-endpoint path="storecontrastjob"
                		transformer-refs="JsonToJSONObject BuildStoreContrastJobRequest"
                		responseTransformer-refs="SpitOutJson" />
                    <restlet:uri-template-filter pattern="/workspaces/{set-property.id}/contrast" verbs="POST" />
                </filtering-router>

<!-- 			<filtering-router>
					<vm:outbound-endpoint path="retrieveworkspace"
						responseTransformer-refs="ExtractFileInfo SpitOutJsonTreeList" />
					<restlet:uri-template-filter pattern="/workspace" />
				</filtering-router> -->
<!--
				<filtering-router>
                    <vm:outbound-endpoint path="testjobs" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/testjobs" verbs="GET" />
                </filtering-router>
                -->
                <filtering-router>
                    <vm:outbound-endpoint path="getjobs" responseTransformer-refs="FormatError AbortOnError ExtractJobInfo SpitOutJson" />
                    <restlet:uri-template-filter pattern="/jobs" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="stopjob" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/jobs/{set-payload.jobId}?method=stop" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="getjob" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError ExtractJobInfo SpitOutJson" />
                    <restlet:uri-template-filter pattern="/jobs/{set-payload.jobId}" verbs="GET" />
                </filtering-router>
                <filtering-router>
                    <vm:outbound-endpoint path="deletejob" transformer-refs="StringToLong" responseTransformer-refs="FormatError AbortOnError DiscardPayload" />
                    <restlet:uri-template-filter pattern="/jobs/{set-payload.jobId}" verbs="DELETE" />
                </filtering-router>

				<custom-catch-all-strategy class="org.iplantc.muletoolkit.routing.NoServiceCatchAllStrategy" />
			</outbound>
		</service>

<!--
		<service name="TestJobs">
		    <inbound>
                <vm:inbound-endpoint path="testjobs" synchronous="true" />
            </inbound>
            <component>
                <no-arguments-entry-point-resolver>
                    <include-entry-point method="test" />
                </no-arguments-entry-point-resolver>
                <spring-object bean="testJobService" />
            </component>
		</service>
-->
		<service name="GetJobs">
            <inbound>
                <vm:inbound-endpoint path="getjobs" synchronous="true" />
            </inbound>
            <component>
                <no-arguments-entry-point-resolver>
                    <include-entry-point method="getJobs" />
                </no-arguments-entry-point-resolver>
                <spring-object bean="jobService" />
            </component>
        </service>

        <service name="GetJob">
            <inbound>
                <vm:inbound-endpoint path="getjob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getJob" />
                </method-entry-point-resolver>
                <spring-object bean="jobService" />
            </component>
        </service>

        <service name="StopJob">
            <inbound>
                <vm:inbound-endpoint path="stopjob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="stopJob" />
                </method-entry-point-resolver>
                <spring-object bean="jobService" />
            </component>
        </service>

         <service name="DeleteJob">
            <inbound>
                <vm:inbound-endpoint path="deletejob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="deleteJob" />
                </method-entry-point-resolver>
                <spring-object bean="jobService" />
            </component>
        </service>

        <service name="Login">
            <inbound>
                <vm:inbound-endpoint path="login" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="login" />
                </method-entry-point-resolver>
                <spring-object bean="userSessionService" />
            </component>
        </service>

        <service name="GetUserInfo">
            <inbound>
                <vm:inbound-endpoint path="getuserinfo" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getInfo" />
                </method-entry-point-resolver>
                <spring-object bean="userService" />
            </component>
        </service>

		<service name="SendEventToProvenance">
		    <inbound>
		        <vm:inbound-endpoint path="sendEventToProvenance" synchronous="true" />
		    </inbound>
		    <component>
                <method-entry-point-resolver>
                    <include-entry-point method="handleEvent" />
                </method-entry-point-resolver>
                <spring-object bean="provenanceService" />
            </component>
		</service>

		<service name="TransformTreeDataToTree">
			<inbound>
				<vm:inbound-endpoint path="transformtreedatatotree" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="transformTreeDataToTree" />
			</component>
		</service>

		<service name="TransformMatrixDataToMatrix">
            <inbound>
                <vm:inbound-endpoint path="transformmatrixdatatomatrix" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="transformMatrixDataToMatrix" />
            </component>
        </service>

		<service name="TransformDatabaseModel">
            <inbound>
                <vm:inbound-endpoint path="transformdbdatamodel" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="transformDatabaseModel" />
            </component>
        </service>

		<service name="TransformDatabaseTextModel">
            <inbound>
                <vm:inbound-endpoint path="transformdbtextdatamodel" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="transformDatabaseTextModel" />
            </component>
        </service>

		<service name="TransformDatabaseTrees">
            <inbound>
                <vm:inbound-endpoint path="transformdbtrees" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="transform" />
                </method-entry-point-resolver>
                <spring-object bean="transformDatabaseTrees" />
            </component>
        </service>

		<service name="TransformDatabaseMatrix">
            <inbound>
                <vm:inbound-endpoint path="transformdbmatrix" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="transform" />
                </method-entry-point-resolver>
                <spring-object bean="transformDatabaseMatrix" />
            </component>
        </service>

		<service name="BuildTreeFileData">
            <inbound>
                <vm:inbound-endpoint path="buildtreefiledata" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="buildFileDataFromTrees" />
                </method-entry-point-resolver>
                <spring-object bean="fileDataBuilder" />
            </component>
        </service>

		<service name="BuildMatrixFileData">
            <inbound>
                <vm:inbound-endpoint path="buildmatrixfiledata" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="buildFileDataFromMatrix" />
                </method-entry-point-resolver>
                <spring-object bean="fileDataBuilder" />
            </component>
        </service>

		<service name="ExportPhyloparserModelToNexus">
            <inbound>
                <vm:inbound-endpoint path="exportphyloparsermodeltonexus" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="exportPhyloparserModelToNexus" />
            </component>
        </service>

		<service name="ExportPhyloparserModelToNewick">
            <inbound>
                <vm:inbound-endpoint path="exportphyloparsermodeltonewick" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="exportPhyloparserModelToNewick" />
            </component>
        </service>

		<service name="ExportPhyloparserModelToPhylipTrait">
            <inbound>
                <vm:inbound-endpoint path="exportphyloparsermodeltophyliptrait" synchronous="true" />
            </inbound>
            <component>
                <spring-object bean="exportPhyloparserModelToPhylipTrait" />
            </component>
        </service>

		<service name="TransformAndExportFile">
            <inbound>
                <vm:inbound-endpoint path="transformandexportfile" synchronous="true" />
            </inbound>
            <outbound>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
					<vm:outbound-endpoint path="transformdbdatamodel"
						transformer-refs="ForceNexFileExtension AddNexusFileContentResponseHeaders"
						responseTransformer-refs="FormatError">
					   <property key="args" value="arg0" />
					</vm:outbound-endpoint>
					<vm:outbound-endpoint path="exportphyloparsermodeltonexus"
						responseTransformer-refs="FormatError AbortOnError">
					   <property key="args" value="e0" />
					</vm:outbound-endpoint>
					<expression-filter evaluator="jxpath" expression=".[1]/type/id != 7" />
				</custom-outbound-router>
 				<filtering-router>
					<vm:outbound-endpoint path="transformdbtextdatamodel"
						transformer-refs="ForceTxtFileExtension AddTextFileContentResponseHeaders"
						responseTransformer-refs="FormatError" />
					<expression-filter evaluator="jxpath" expression=".[1]/type/id = 7" />
				</filtering-router>
            </outbound>
		</service>

		<service name="TransformAndExportFileWithProvenance">
            <inbound>
                <vm:inbound-endpoint path="transformandexportfilewithprovenance" synchronous="true" />
            </inbound>
            <outbound>
                <custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
                    <vm:outbound-endpoint path="transformdbdatamodel"
                        transformer-refs="ForceNexFileExtension AddNexusFileContentResponseHeaders"
                        responseTransformer-refs="FormatError">
                       <property key="args" value="arg0,arg1" />
                    </vm:outbound-endpoint>
                    <vm:outbound-endpoint path="exportphyloparsermodeltonexus"
                        responseTransformer-refs="FormatError AbortOnError">
                       <property key="args" value="e0" />
                    </vm:outbound-endpoint>
                    <expression-filter evaluator="jxpath" expression=".[1]/type/id != 7" />
                </custom-outbound-router>
                <filtering-router>
                    <vm:outbound-endpoint path="transformdbtextdatamodel"
                        transformer-refs="ForceTxtFileExtension AddTextFileContentResponseHeaders"
                        responseTransformer-refs="FormatError" />
                    <expression-filter evaluator="jxpath" expression=".[1]/type/id = 7" />
                </filtering-router>
            </outbound>
        </service>

		<service name="RetrieveFileData">
			<inbound>
				<vm:inbound-endpoint path="retrievefiledata" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveFile" />
				</method-entry-point-resolver>
				<spring-object bean="fileService" />
			</component>
		</service>

		<service name="RetrieveFileContents">
			<inbound>
				<vm:inbound-endpoint path="retrievefilecontents" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveFileContents" />
				</method-entry-point-resolver>
				<spring-object bean="fileService" />
			</component>
		</service>

		<service name="RetrieveFiles">
			<inbound>
				<vm:inbound-endpoint path="retrievefiles" synchronous="true" />
			</inbound>
			<component>
				<method-entry-point-resolver>
					<include-entry-point method="retrieveFiles" />
				</method-entry-point-resolver>
				<spring-object bean="fileService" />
			</component>
		</service>

        <service name="DeleteFile">
            <inbound>
                <vm:inbound-endpoint path="deletefile" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="deleteFile" />
                </method-entry-point-resolver>
                <spring-object bean="fileService" />
            </component>
        </service>

        <service name="DeleteResources">
            <inbound>
                <vm:inbound-endpoint path="deleteresources" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="deleteResources" />
                </method-entry-point-resolver>
                <spring-object bean="folderService" />
            </component>
        </service>

        <service name="RetrieveFileProvenanceTextAll">
            <inbound>
                <vm:inbound-endpoint path="retrievefileprovenancetextall" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getProvenanceTextAll" />
                </method-entry-point-resolver>
                <spring-object bean="provenanceService" />
            </component>
        </service>

        <service name="RetrieveFileProvenanceTextComments">
            <inbound>
                <vm:inbound-endpoint path="retrievefileprovenancetextcomments" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="getProvenanceTextComments" />
                </method-entry-point-resolver>
                <spring-object bean="provenanceService" />
            </component>
        </service>

        <service name="CreateFolder">
            <inbound>
                <vm:inbound-endpoint path="createFolder" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="createFolder" />
                </method-entry-point-resolver>
                <spring-object bean="folderService" />
            </component>
        </service>

        <service name="DeleteFolder">
            <inbound>
                <vm:inbound-endpoint path="deleteFolder" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="deleteFolder" />
                </method-entry-point-resolver>
                <spring-object bean="folderService" />
            </component>
        </service>

        <service name="RenameFolder">
            <inbound>
                <vm:inbound-endpoint path="renameFolder" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="renameFolder" />
                </method-entry-point-resolver>
                <spring-object bean="folderService" />
            </component>
        </service>

        <service name="MoveFile">
            <inbound>
                <vm:inbound-endpoint path="moveFile" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="moveFile" />
                </method-entry-point-resolver>
                <spring-object bean="folderService" />
                <binding interface="org.iplantc.events.service.EventService" method="publish">
                    <vm:outbound-endpoint path="publishEvent" />
                </binding>
            </component>
        </service>

		<service name="StoreContrastJob">
            <inbound>
                <vm:inbound-endpoint path="storecontrastjob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="storeConfiguration" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

		<service name="RetrieveContrastJobs">
            <inbound>
                <vm:inbound-endpoint path="retrievecontrastjobs" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveConfigurations" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

		<service name="RetrieveContrastJob">
            <inbound>
                <vm:inbound-endpoint path="retrievecontrastjob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveConfiguration" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

		<service name="RetrieveContrastJobConfig">
            <inbound>
                <vm:inbound-endpoint path="retrievecontrastjobconfig" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="retrieveJobConfiguration" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

		<service name="UpdateContrastJobStatus">
            <inbound>
                <vm:inbound-endpoint path="updateContrastJobStatus" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="updateStatus" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

		<service name="DeleteContrastJob">
            <inbound>
                <vm:inbound-endpoint path="deleteContrastJob" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="deleteConfiguration" />
                </method-entry-point-resolver>
                <spring-object bean="contrastJobConfigService" />
            </component>
		</service>

        <service name="ReconcileContrastData">
            <inbound>
                <vm:inbound-endpoint path="reconcileContrastData" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="reconcile" />
                </method-entry-point-resolver>
                <spring-object bean="reconcileContrastData" />
            </component>
        </service>

        <service name="RunContrast">
            <inbound>
                <vm:inbound-endpoint path="runcontrast" synchronous="true" />
            </inbound>
            <component>
                <method-entry-point-resolver>
                    <include-entry-point method="runContrast" />
                </method-entry-point-resolver>
                <spring-object bean="runContrast" />
            </component>
        </service>

		<service name="ContrastSucceeded">
            <inbound>
                <vm:inbound-endpoint path="contrastSucceeded" synchronous="true" />
            </inbound>
            <outbound>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
 					<vm:outbound-endpoint path="uploadfile"
 						responseTransformer-refs="FormatError">
 						<property key="args" value="arg1,arg2,arg3,arg4" />
 					</vm:outbound-endpoint>
 					<vm:outbound-endpoint path="updateContrastJobStatus">
 						<property key="args" value="arg0,String:COMPLETED" />
 					</vm:outbound-endpoint>
				</custom-outbound-router>
            </outbound>
		</service>

		<service name="ContrastFailed">
            <inbound>
                <vm:inbound-endpoint path="contrastFailed" synchronous="true" />
            </inbound>
            <outbound>
 				<custom-outbound-router class="org.iplantc.muletoolkit.routing.OrchestrationRouter">
 					<vm:outbound-endpoint path="uploadfile"
 						responseTransformer-refs="FormatError">
 						<property key="args" value="arg1,arg2,arg3,arg4" />
 					</vm:outbound-endpoint>
 					<vm:outbound-endpoint path="updateContrastJobStatus">
 						<property key="args" value="arg0,String:ERROR" />
 					</vm:outbound-endpoint>
				</custom-outbound-router>
            </outbound>
		</service>

		<service name="CountTrees">
			<inbound>
				<vm:inbound-endpoint path="counttrees" synchronous="true" />
			</inbound>
			<component>
				<spring-object bean="countTrees" />
			</component>
		</service>
    </model>

</mule>
